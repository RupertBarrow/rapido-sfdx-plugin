"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberExpressionContainsMemberExpressionThisDotFoo = exports.MemberExpressionIsThisDotFoo = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const utils_1 = require("@typescript-eslint/utils");
const MemberExpressionIsThisDotFoo = (node, name) => {
    var _a, _b, _c;
    return node.type === utils_1.AST_NODE_TYPES.MemberExpression &&
        ((_a = node.object) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.ThisExpression &&
        ((_b = node.property) === null || _b === void 0 ? void 0 : _b.type) === utils_1.AST_NODE_TYPES.Identifier &&
        ((_c = node.property) === null || _c === void 0 ? void 0 : _c.name) === name;
};
exports.MemberExpressionIsThisDotFoo = MemberExpressionIsThisDotFoo;
const MemberExpressionContainsMemberExpressionThisDotFoo = (node, name) => {
    var _a, _b, _c, _d, _e, _f;
    return node.type === utils_1.AST_NODE_TYPES.MemberExpression &&
        ((_a = node.object) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.MemberExpression &&
        ((_b = node.object) === null || _b === void 0 ? void 0 : _b.object.type) === utils_1.AST_NODE_TYPES.ThisExpression &&
        ((_d = (_c = node.object) === null || _c === void 0 ? void 0 : _c.property) === null || _d === void 0 ? void 0 : _d.type) === utils_1.AST_NODE_TYPES.Identifier &&
        ((_f = (_e = node.object) === null || _e === void 0 ? void 0 : _e.property) === null || _f === void 0 ? void 0 : _f.name) === name;
};
exports.MemberExpressionContainsMemberExpressionThisDotFoo = MemberExpressionContainsMemberExpressionThisDotFoo;
