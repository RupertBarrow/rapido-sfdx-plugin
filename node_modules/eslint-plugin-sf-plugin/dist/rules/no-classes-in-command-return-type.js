"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noClassesInCommandReturnType = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const utils_1 = require("@typescript-eslint/utils");
const ts = __importStar(require("typescript"));
const commands_1 = require("../shared/commands");
exports.noClassesInCommandReturnType = utils_1.ESLintUtils.RuleCreator.withoutDocs({
    meta: {
        docs: {
            description: 'The return type of the run method should not contain a class.',
            recommended: 'error',
        },
        messages: {
            summary: 'The return type of the run method should not contain a class.  Return something that can be expressed as an object so that it supports JSON.',
        },
        type: 'problem',
        schema: [],
        fixable: 'code',
    },
    defaultOptions: [],
    create(context) {
        return {
            // eslint-disable-next-line complexity
            MethodDefinition(node) {
                var _a, _b, _c, _d, _e;
                if ((0, commands_1.isRunMethod)(node) &&
                    ((_a = node.value.returnType) === null || _a === void 0 ? void 0 : _a.typeAnnotation.type) === utils_1.AST_NODE_TYPES.TSTypeReference &&
                    ((_c = (_b = node.value.returnType) === null || _b === void 0 ? void 0 : _b.typeAnnotation.typeParameters) === null || _c === void 0 ? void 0 : _c.params[0].type) === utils_1.AST_NODE_TYPES.TSTypeReference) {
                    const parserServices = utils_1.ESLintUtils.getParserServices(context);
                    const runType = (_d = node.value.returnType) === null || _d === void 0 ? void 0 : _d.typeAnnotation.typeParameters.params[0];
                    const realNode = parserServices.esTreeNodeToTSNodeMap.get(runType);
                    const usesClass = hasOrIsClass(realNode, parserServices);
                    if (usesClass) {
                        return context.report({
                            node: (_e = node.value.returnType) === null || _e === void 0 ? void 0 : _e.typeAnnotation.typeParameters.params[0],
                            messageId: 'summary',
                        });
                    }
                }
            },
        };
    },
});
const hasOrIsClass = (tn, parserServices) => {
    var _a, _b, _c;
    // get the TS for this node
    const checker = parserServices.program.getTypeChecker();
    // follow the type to where it came from
    const underlyingNode = checker.getSymbolAtLocation(tn.getChildAt(0));
    const declaration = (_a = underlyingNode === null || underlyingNode === void 0 ? void 0 : underlyingNode.getDeclarations()) === null || _a === void 0 ? void 0 : _a[0];
    if (!declaration)
        return false;
    if (ts.isClassLike(declaration)) {
        return true;
    }
    if (ts.isInterfaceDeclaration(declaration) || ts.isTypeLiteralNode(declaration)) {
        return declaration.members.some((m) => hasOrIsClass(m, parserServices));
    }
    if (ts.isTypeAliasDeclaration(declaration) && ts.isTypeLiteralNode(declaration.type)) {
        return declaration.type.members.some((m) => hasOrIsClass(m, parserServices));
    }
    if ((ts.isPropertyDeclaration(declaration) || ts.isPropertySignature(declaration)) &&
        declaration.type &&
        ts.isTypeNode(declaration.type)) {
        return hasOrIsClass(declaration.type, parserServices);
    }
    if (ts.isImportSpecifier(declaration)) {
        // Follow the import
        const type = checker.getTypeAtLocation(declaration);
        const symbolDeclarations = (_c = (_b = type.getSymbol()) === null || _b === void 0 ? void 0 : _b.getDeclarations()) !== null && _c !== void 0 ? _c : [];
        return symbolDeclarations.some((d) => ts.isClassLike(d) || ((ts.isTypeNode(d) || ts.isTypeElement(d)) && hasOrIsClass(d, parserServices)));
    }
    // anything other than a type/interface/class
    return false;
};
