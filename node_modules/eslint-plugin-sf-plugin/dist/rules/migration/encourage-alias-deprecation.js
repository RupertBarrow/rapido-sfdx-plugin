"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.encourageAliasDeprecation = void 0;
const utils_1 = require("@typescript-eslint/utils");
const commands_1 = require("../../shared/commands");
const flags_1 = require("../../shared/flags");
exports.encourageAliasDeprecation = utils_1.ESLintUtils.RuleCreator.withoutDocs({
    meta: {
        docs: {
            description: 'Commands and flags aliases probably want to deprecate their old names to provide more warnings to users',
            recommended: 'warn',
        },
        messages: {
            command: 'Suggestion: add deprecateAliases = true to your command to provide warning when users use one of its aliases',
            flag: 'Suggestion: add deprecateAliases:true to your flag to provide warning when users use one of its aliases',
        },
        type: 'suggestion',
        hasSuggestions: true,
        schema: [],
        fixable: 'code',
    },
    defaultOptions: [],
    create(context) {
        return (0, commands_1.isInCommandDirectory)(context)
            ? {
                PropertyDefinition(node) {
                    var _a;
                    if ((0, commands_1.ancestorsContainsSfCommand)(context.getAncestors())) {
                        if (node.key.type === utils_1.AST_NODE_TYPES.Identifier && node.key.name === 'aliases') {
                            // but you don't have deprecateAliases = true then add id
                            if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.ClassBody &&
                                !node.parent.body.some((n) => n.type === utils_1.AST_NODE_TYPES.PropertyDefinition &&
                                    n.key.type === utils_1.AST_NODE_TYPES.Identifier &&
                                    n.key.name === 'deprecateAliases')) {
                                context.report({
                                    node,
                                    messageId: 'command',
                                    suggest: [
                                        {
                                            messageId: 'command',
                                            fix: (fixer) => fixer.insertTextBefore(node, 'public static readonly deprecateAliases = true;'),
                                        },
                                    ],
                                });
                            }
                        }
                    }
                },
                Property(node) {
                    var _a, _b, _c;
                    if ((0, flags_1.isFlag)(node) &&
                        ((_a = node.value) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.CallExpression &&
                        ((_c = (_b = node.value.arguments) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) === utils_1.AST_NODE_TYPES.ObjectExpression &&
                        (0, commands_1.ancestorsContainsSfCommand)(context.getAncestors())) {
                        const argProps = node.value.arguments[0].properties.filter(utils_1.ASTUtils.isNodeOfType(utils_1.AST_NODE_TYPES.Property));
                        const aliasesProperty = argProps.find((property) => (0, flags_1.flagPropertyIsNamed)(property, 'aliases'));
                        if (aliasesProperty && !argProps.some((property) => (0, flags_1.flagPropertyIsNamed)(property, 'deprecateAliases'))) {
                            context.report({
                                node: aliasesProperty,
                                messageId: 'flag',
                                suggest: [
                                    {
                                        messageId: 'flag',
                                        fix: (fixer) => fixer.insertTextBefore(aliasesProperty, 'deprecateAliases:true,'),
                                    },
                                ],
                            });
                        }
                    }
                },
            }
            : {};
    },
});
