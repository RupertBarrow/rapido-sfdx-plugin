"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.noBuiltinFlags = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const utils_1 = require("@typescript-eslint/utils");
const commands_1 = require("../../shared/commands");
const flags_1 = require("../../shared/flags");
const builtInFlagTypes = ['verbose', 'concise', 'quiet'];
exports.noBuiltinFlags = utils_1.ESLintUtils.RuleCreator.withoutDocs({
    meta: {
        docs: {
            description: "Handling for sfdxCommand's flags.builtin",
            recommended: 'error',
        },
        messages: {
            message: 'Built-in flags are not available on sfCommand.  Use a boolean and add your own summary message',
        },
        type: 'problem',
        schema: [],
        fixable: 'code',
    },
    defaultOptions: [],
    create(context) {
        return (0, commands_1.isInCommandDirectory)(context)
            ? {
                Property(node) {
                    if ((0, flags_1.isFlag)(node) &&
                        node.key.type === utils_1.AST_NODE_TYPES.Identifier &&
                        builtInFlagTypes.includes(node.key.name) &&
                        (0, commands_1.ancestorsContainsSfCommand)(context.getAncestors())) {
                        const toReplace = (0, flags_1.getCalleePropertyByName)(node, 'builtin');
                        if (toReplace) {
                            context.report({
                                node: toReplace,
                                messageId: 'message',
                                fix: (fixer) => fixer.replaceText(toReplace, 'boolean'),
                            });
                        }
                    }
                },
            }
            : {};
    },
});
