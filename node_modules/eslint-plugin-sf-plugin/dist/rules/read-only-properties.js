"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readOnlyProperties = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const utils_1 = require("@typescript-eslint/utils");
const commands_1 = require("../shared/commands");
const props = ['summary', 'description', 'examples', 'flags', 'requiresProject', 'hidden', 'aliases'];
exports.readOnlyProperties = utils_1.ESLintUtils.RuleCreator.withoutDocs({
    meta: {
        docs: {
            description: 'Class-level static properties, like flags or descriptions, should be marked public and read-only',
            recommended: 'error',
        },
        messages: {
            readonly: 'The {{prop}} property should be read-only',
            public: 'The {{prop}} property should be public',
        },
        type: 'problem',
        fixable: 'code',
        schema: [],
    },
    defaultOptions: [],
    create(context) {
        return (0, commands_1.isInCommandDirectory)(context)
            ? {
                PropertyDefinition(node) {
                    var _a, _b;
                    if (node.static &&
                        node.key.type === utils_1.AST_NODE_TYPES.Identifier &&
                        props.includes(node.key.name) &&
                        ((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.ClassBody &&
                        ((_b = node.parent.parent) === null || _b === void 0 ? void 0 : _b.type) === utils_1.AST_NODE_TYPES.ClassDeclaration &&
                        (0, commands_1.extendsSfCommand)(node.parent.parent)) {
                        if (!node.readonly) {
                            context.report({
                                node,
                                messageId: 'readonly',
                                data: { prop: node.key.name },
                                fix: (fixer) => fixer.insertTextBefore(node.key, 'readonly '),
                            });
                        }
                        else if (node.accessibility && node.accessibility !== 'public') {
                            const replacementText = context.getSourceCode().getText(node).replace(node.accessibility, 'public');
                            context.report({
                                node,
                                messageId: 'public',
                                data: { prop: node.key.name },
                                fix: (fixer) => fixer.replaceText(node, replacementText),
                            });
                        }
                    }
                },
            }
            : {};
    },
});
