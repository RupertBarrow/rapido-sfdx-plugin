"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConnectionWithVersion = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const utils_1 = require("@typescript-eslint/utils");
const utils_2 = require("@typescript-eslint/utils");
const commands_1 = require("../shared/commands");
exports.getConnectionWithVersion = utils_1.ESLintUtils.RuleCreator.withoutDocs({
    meta: {
        docs: {
            description: 'Calls to getConnection should pass in a version',
            recommended: 'warn',
        },
        messages: {
            addVersion: `getConnection should pass in a version, typically from the api-version flag,
        even if that value may be undefined.
        Otherwise, the org will default to its maximum version`,
        },
        type: 'problem',
        schema: [],
    },
    defaultOptions: [],
    create(context) {
        return (0, commands_1.isInCommandDirectory)(context)
            ? {
                CallExpression(node) {
                    var _a, _b;
                    if (node.type === utils_2.AST_NODE_TYPES.CallExpression &&
                        node.arguments.length === 0 &&
                        ((_a = node.callee) === null || _a === void 0 ? void 0 : _a.type) === utils_2.AST_NODE_TYPES.MemberExpression &&
                        node.callee.property.type === utils_2.AST_NODE_TYPES.Identifier &&
                        ((_b = node.callee.property) === null || _b === void 0 ? void 0 : _b.name) === 'getConnection' &&
                        (0, commands_1.ancestorsContainsSfCommand)(context.getAncestors())) {
                        context.report({
                            node: node.callee.property,
                            messageId: 'addVersion',
                        });
                    }
                },
            }
            : {};
    },
});
