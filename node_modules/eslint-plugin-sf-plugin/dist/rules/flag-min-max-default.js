"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flagMinMaxDefault = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const utils_1 = require("@typescript-eslint/utils");
const commands_1 = require("../shared/commands");
const flags_1 = require("../shared/flags");
exports.flagMinMaxDefault = utils_1.ESLintUtils.RuleCreator.withoutDocs({
    meta: {
        docs: {
            description: 'Enforce that flags with min/max values have a default value',
            recommended: 'warn',
        },
        messages: {
            message: 'If your flag has a min or max value, it should have a default value.  Otherwise, it will be undefined',
        },
        type: 'problem',
        schema: [],
    },
    defaultOptions: [],
    create(context) {
        return (0, commands_1.isInCommandDirectory)(context)
            ? {
                Property(node) {
                    var _a, _b, _c;
                    if ((0, flags_1.isFlag)(node) && (0, commands_1.ancestorsContainsSfCommand)(context.getAncestors())) {
                        if (((_a = node.value) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.CallExpression &&
                            ((_c = (_b = node.value.arguments) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) === utils_1.AST_NODE_TYPES.ObjectExpression &&
                            // has min/max
                            node.value.arguments[0].properties.some((property) => property.type === utils_1.AST_NODE_TYPES.Property &&
                                ((0, flags_1.flagPropertyIsNamed)(property, 'min') || (0, flags_1.flagPropertyIsNamed)(property, 'max'))) &&
                            !node.value.arguments[0].properties.some((property) => property.type === utils_1.AST_NODE_TYPES.Property &&
                                // defaultValue for DurationFlags
                                ((0, flags_1.flagPropertyIsNamed)(property, 'default') || (0, flags_1.flagPropertyIsNamed)(property, 'defaultValue')))) {
                            context.report({
                                node,
                                messageId: 'message',
                            });
                        }
                    }
                },
            }
            : {};
    },
});
